{"ast":null,"code":"import { API_BASE_URL, DEMO_MODE } from '../utils/constants';\n\n// Demo mode - remove this when you have real backend\nconst demoLogin = async credentials => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\n        resolve({\n          user: {\n            name: 'Demo User',\n            email: credentials.email\n          },\n          token: 'demo-jwt-token'\n        });\n      } else {\n        reject(new Error('Invalid credentials'));\n      }\n    }, 1000);\n  });\n};\nconst demoRegister = async userData => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        user: {\n          name: userData.name,\n          email: userData.email\n        },\n        token: 'demo-jwt-token'\n      });\n    }, 1000);\n  });\n};\nexport const loginUser = async credentials => {\n  if (DEMO_MODE) {\n    return demoLogin(credentials);\n  }\n\n  // Your actual API call here\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  const data = await response.json();\n  if (!response.ok) throw new Error(data.message);\n  return data;\n};\nexport const registerUser = async userData => {\n  if (DEMO_MODE) {\n    return demoRegister(userData);\n  }\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  const data = await response.json();\n  if (!response.ok) throw new Error(data.message);\n  return data;\n};","map":{"version":3,"names":["API_BASE_URL","DEMO_MODE","demoLogin","credentials","Promise","resolve","reject","setTimeout","email","password","user","name","token","Error","demoRegister","userData","loginUser","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","registerUser"],"sources":["D:/TaskBoardPro/frontend/src/services/authService.jsx"],"sourcesContent":["import { API_BASE_URL, DEMO_MODE } from '../utils/constants';\r\n\r\n// Demo mode - remove this when you have real backend\r\nconst demoLogin = async (credentials) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (credentials.email === 'demo@example.com' && credentials.password === 'password') {\r\n        resolve({\r\n          user: { name: 'Demo User', email: credentials.email },\r\n          token: 'demo-jwt-token'\r\n        });\r\n      } else {\r\n        reject(new Error('Invalid credentials'));\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst demoRegister = async (userData) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        user: { name: userData.name, email: userData.email },\r\n        token: 'demo-jwt-token'\r\n      });\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nexport const loginUser = async (credentials) => {\r\n  if (DEMO_MODE) {\r\n    return demoLogin(credentials);\r\n  }\r\n  \r\n  // Your actual API call here\r\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n  \r\n  const data = await response.json();\r\n  if (!response.ok) throw new Error(data.message);\r\n  return data;\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  if (DEMO_MODE) {\r\n    return demoRegister(userData);\r\n  }\r\n  \r\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(userData),\r\n  });\r\n  \r\n  const data = await response.json();\r\n  if (!response.ok) throw new Error(data.message);\r\n  return data;\r\n};"],"mappings":"AAAA,SAASA,YAAY,EAAEC,SAAS,QAAQ,oBAAoB;;AAE5D;AACA,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf,IAAIJ,WAAW,CAACK,KAAK,KAAK,kBAAkB,IAAIL,WAAW,CAACM,QAAQ,KAAK,UAAU,EAAE;QACnFJ,OAAO,CAAC;UACNK,IAAI,EAAE;YAAEC,IAAI,EAAE,WAAW;YAAEH,KAAK,EAAEL,WAAW,CAACK;UAAM,CAAC;UACrDI,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,MAAM;QACLN,MAAM,CAAC,IAAIO,KAAK,CAAC,qBAAqB,CAAC,CAAC;MAC1C;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EACvC,OAAO,IAAIX,OAAO,CAAEC,OAAO,IAAK;IAC9BE,UAAU,CAAC,MAAM;MACfF,OAAO,CAAC;QACNK,IAAI,EAAE;UAAEC,IAAI,EAAEI,QAAQ,CAACJ,IAAI;UAAEH,KAAK,EAAEO,QAAQ,CAACP;QAAM,CAAC;QACpDI,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,SAAS,GAAG,MAAOb,WAAW,IAAK;EAC9C,IAAIF,SAAS,EAAE;IACb,OAAOC,SAAS,CAACC,WAAW,CAAC;EAC/B;;EAEA;EACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,YAAY,aAAa,EAAE;IACzDmB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACpB,WAAW;EAClC,CAAC,CAAC;EAEF,MAAMqB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE,MAAM,IAAIb,KAAK,CAACW,IAAI,CAACG,OAAO,CAAC;EAC/C,OAAOH,IAAI;AACb,CAAC;AAED,OAAO,MAAMI,YAAY,GAAG,MAAOb,QAAQ,IAAK;EAC9C,IAAId,SAAS,EAAE;IACb,OAAOa,YAAY,CAACC,QAAQ,CAAC;EAC/B;EAEA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,YAAY,gBAAgB,EAAE;IAC5DmB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;EAC/B,CAAC,CAAC;EAEF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE,MAAM,IAAIb,KAAK,CAACW,IAAI,CAACG,OAAO,CAAC;EAC/C,OAAOH,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}