{"ast":null,"code":"import { API_BASE_URL } from '../utils/constants';\n\n// Handle API responses\nconst handleResponse = async response => {\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Something went wrong');\n  }\n  return data;\n};\n\n// Register user\nexport const registerUser = async userData => {\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  return handleResponse(response);\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  return handleResponse(response);\n};","map":{"version":3,"names":["API_BASE_URL","handleResponse","response","data","json","ok","Error","message","registerUser","userData","fetch","method","headers","body","JSON","stringify","loginUser","credentials"],"sources":["D:/TaskBoardPro/frontend/src/services/authService.jsx"],"sourcesContent":["import { API_BASE_URL } from '../utils/constants';\r\n\r\n// Handle API responses\r\nconst handleResponse = async (response) => {\r\n  const data = await response.json();\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Something went wrong');\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Register user\r\nexport const registerUser = async (userData) => {\r\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n  \r\n  return handleResponse(response);\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (credentials) => {\r\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n  \r\n  return handleResponse(response);\r\n};"],"mappings":"AAAA,SAASA,YAAY,QAAQ,oBAAoB;;AAEjD;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,MAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAElC,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,sBAAsB,CAAC;EACzD;EAEA,OAAOJ,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,MAAMP,QAAQ,GAAG,MAAMQ,KAAK,CAAC,GAAGV,YAAY,gBAAgB,EAAE;IAC5DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ;EAC/B,CAAC,CAAC;EAEF,OAAOR,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMc,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMf,QAAQ,GAAG,MAAMQ,KAAK,CAAC,GAAGV,YAAY,aAAa,EAAE;IACzDW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;EAClC,CAAC,CAAC;EAEF,OAAOhB,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}